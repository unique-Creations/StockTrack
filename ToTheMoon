import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, Bidirectional
from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from yahoo_fin import stock_info as si
from collections import deque

import os
import numpy as np
import pandas as pd
import random

np.random.seed(314)
tf.random.set_seed(314)
random.seed(314)


def shuffle_in_unison(a, b):
    # shuffle two arrays in the same way
    state = np.random.get_state()
    np.random.shuffle(a)
    np.set_state(state)
    np.random.shuffle(b)


def load_data(ticker, n_steps=50, scale=True,
              lookup_step=1, split_by_date=True, shuffle=True,
              test_size=0.2, feature_columns=['adjclose', 'volume', 'open', 'high', 'low']):
    """
    Loads data from Yahoo Finance source, as well as scaling, shuffling, normalizing and splitting.

    :param ticker : (str/pd.DataFrame) the ticker you want to load.
    :param n_steps: (int) the historical sequence length (i.e window size) used to predict default is 50
    :param scale: (bool) whether to scale prices from 0 to 1, default is True
    :param lookup_step: (bool) the future lookup step to predict, default is 1 (e.g next day)
    :param split_by_date: (bool) whether we split the dataset into training/testing by date
    :param shuffle:  (bool) whether to shuffle the dataset (both training & testing), default is True
    :param test_size: (float) ratio for test data, default is 0.2 (20% testing data)
    :param feature_columns: (list) the list of features to use to feed into the model. default is everything grabbed
           from yahoo_fin
    """
    # see if ticker is already a loaded stock from yahoo finance

    if isinstance(ticker, str):
        # load it from yahoo_fin library
        df = si.get_data(ticker)
    elif isinstance(ticker, pd.DataFrame):
        # already loaded, use it directly
        df = ticker
    else:
        raise TypeError("ticker can be either a str or a 'pd.DataFrame' instances")
    # this will contain all the elements we want to return form this function

    result = {}

    # we will also return the original dataframe itself

    result['df'] = df.copy()

    # make sure that the passed feature_columns exist in the dataframe

    for col in feature_columns:
        assert col in df.columns, f"'{col}' does not exist in the dataframe. "
    # add date as column
    if "date" not in df.columns:
        df["date"] = df.index
    if scale:
        column_scaler = {}
        # scale the data (prices) from 0 to 1
        for column in feature_columns:
            scaler = preprocessing.MinMaxScaler()
            df[column] = scaler.fit_transform(np.expand_dims(df[column].values, axis=1))
            column_scaler[column] = scaler

            # add the MinMaxScaler instances to the result returned
            result["column_scaler"] = column_scaler

            # add the target column (label) by shifting by 'lookup_step'
            df['future'] = df['adjclose'].shift(-lookup_step)
